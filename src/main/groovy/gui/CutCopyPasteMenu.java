package gui;import java.awt.Component;import java.awt.Font;import java.awt.datatransfer.Clipboard;import java.awt.datatransfer.ClipboardOwner;import java.awt.datatransfer.Transferable;import java.awt.event.InputEvent;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import javax.swing.JMenu;import javax.swing.JMenuItem;import javax.swing.JPopupMenu;import javax.swing.JSeparator;import javax.swing.text.JTextComponent;public class CutCopyPasteMenu extends JPopupMenu implements ClipboardOwner {    private static final long serialVersionUID = 1L;    private static final boolean DEFAULT_PASTE_OVER = false;    protected CutCopyPasteMenuItems menuItems = null;    protected Font font = new Font("Tahoma", Font.PLAIN, 11);    public CutCopyPasteMenu(JTextComponent invoker) {        this(invoker, DEFAULT_PASTE_OVER);    }    public CutCopyPasteMenu(JTextComponent invoker, CutCopyPasteMenuItems menuItems, boolean includeSelectAll,            boolean pasteOver) {        if (menuItems == null)            menuItems = new CutCopyPasteMenuItems(invoker);        menuItems.setPasteOver(pasteOver);        this.menuItems = menuItems;        this.menuItems.enableUsableMenus(invoker);        add(getCutTextMenu());        add(getCopyTextMenu());        add(getPasteTextMenu());        if (includeSelectAll) {            add(new JSeparator());            add(getSelectAllTextMenu());        }        setAutoPopup();    }    public CutCopyPasteMenu(JTextComponent invoker, boolean includeSelectAll, boolean pasteOver) {        this(invoker, new CutCopyPasteMenuItems(invoker), includeSelectAll, pasteOver);    }    public CutCopyPasteMenu(JTextComponent invoker, boolean includeSelectAll) {        this(invoker, new CutCopyPasteMenuItems(invoker), includeSelectAll, DEFAULT_PASTE_OVER);    }    public CutCopyPasteMenuItems getMenuItems() {        return menuItems;    }    public void lostOwnership(Clipboard clipboard, Transferable contents) {    }    public void show(int x, int y) {        if (getMenuItems().getInvoker() == null)            return;        getMenuItems().enableUsableMenus();        renderPopupMenu(this, font);        super.show(getMenuItems().getInvoker(), x, y);    }    public void show(MouseEvent mouseEvent) {        if (mouseEvent == null)            return;        show(mouseEvent.getX(), mouseEvent.getY());    }    private static void renderMenu(JMenuItem menu, Font font) {        if (font != null)            menu.setFont(font);        if (menu instanceof JMenu) {            JMenu jMenu = (JMenu)menu;            for (int i = 0; i < jMenu.getMenuComponentCount(); i++) {                Component component = jMenu.getMenuComponent(i);                if (component instanceof JMenuItem)                    renderMenu((JMenuItem)component, font);            }        }    }    private static void renderPopupMenu(JPopupMenu menu, Font font) {        for (int i = 0; i < menu.getComponentCount(); i++) {            Component component = menu.getComponent(i);            if (component instanceof JMenuItem)                renderMenu((JMenuItem)component, font);        }        return;    }    public void setFont(Font font) {        if (font == null)            return;        this.font = font;    }    public void setPasteOver(boolean pasteOver) {        menuItems.setPasteOver(pasteOver);    }    public boolean isPasteOver() {        return menuItems.isPasteOver();    }    public JMenuItem getCutTextMenu() {        return getMenuItems().getCutTextMenu();    }    public JMenuItem getCopyTextMenu() {        return getMenuItems().getCopyTextMenu();    }    public JMenuItem getPasteTextMenu() {        return getMenuItems().getPasteTextMenu();    }    public JMenuItem getSelectAllTextMenu() {        return getMenuItems().getSelectAllTextMenu();    }    public String getSelectedText(boolean allIfNoneSelected) {        return getMenuItems().getSelectedText(allIfNoneSelected);    }    public void setAutoPopup() {        if (getMenuItems().getInvoker() == null)            return;        getMenuItems().getInvoker().addMouseListener(new MouseAdapter() {            public void mousePressed(MouseEvent e) {                if ((e.getModifiers() & InputEvent.BUTTON3_MASK) != 0)                    show(e);            }        });    }    public String getClipboardText() {        return getMenuItems().getClipboardText();    }}