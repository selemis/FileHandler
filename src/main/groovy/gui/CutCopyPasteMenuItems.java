package gui;import java.awt.Toolkit;import java.awt.datatransfer.Clipboard;import java.awt.datatransfer.ClipboardOwner;import java.awt.datatransfer.DataFlavor;import java.awt.datatransfer.StringSelection;import java.awt.datatransfer.Transferable;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JMenuItem;import javax.swing.text.BadLocationException;import javax.swing.text.JTextComponent;public class CutCopyPasteMenuItems implements ClipboardOwner {    private JMenuItem cutTextMenu = null;    private JMenuItem copyTextMenu = null;    private JMenuItem pasteTextMenu = null;    private JMenuItem selectAllTextMenu = null;    private JTextComponent invoker = null;    private boolean pasteOver = false;    public CutCopyPasteMenuItems(JTextComponent invoker) {        this.invoker = invoker;    }    /**     * Modify in subclass to perform preoperation. Return false to stop operation.     */    public boolean preCopy() {        return true;    }    /**     * Modify in subclass to perform preoperation. Return false to stop operation.     */    public boolean preCut() {        return true;    }    /**     * Modify in subclass to perform preoperation. Return false to stop operation.     */    public boolean prePaste() {        return true;    }    /**     * Modify in subclass to perform preoperation. Return false to stop operation.     */    public boolean preSelectAll() {        return true;    }    public boolean pasteOnUneditable() {        return false;    }    public boolean pasteEnable() {        return true;    }    /**     * Modify in subclass to perform event after operation.     */    public void postCopy() {    }    /**     * Modify in subclass to perform event after operation.     */    public void postCut() {    }    /**     * Modify in subclass to perform event after operation.     */    public void postPaste() {    }    /**     * Modify in subclass to perform event after operation.     */    public void postSelectAll() {    }    public void lostOwnership(Clipboard clipboard, Transferable contents) {    }    public JTextComponent getInvoker() {        return invoker;    }    public void enableUsableMenus() {        enableUsableMenus(invoker);    }    public void setPasteOver(boolean pasteOver) {        this.pasteOver = pasteOver;    }    public boolean isPasteOver() {        return pasteOver;    }    private String getInvokerText() {        int length = invoker.getDocument().getLength();        if (length > 0)            try {                return invoker.getDocument().getText(0, length);            } catch (BadLocationException ex) {            }        return "";    }    public static void sendToClipboard(ClipboardOwner owner, String text) {        StringSelection fieldContent = new StringSelection(text);        Clipboard clipboard = getClipboard();        if (clipboard != null)            clipboard.setContents(fieldContent, owner);    }    public void enableUsableMenus(@SuppressWarnings("hiding") JTextComponent invoker) {        this.invoker = invoker;        boolean hasText = false;        boolean hasSelectableText = false;        boolean canChange = true;        if (invoker != null) {            String selectedText = getSelectedText(false);            hasSelectableText = selectedText != null && selectedText.length() > 0;            hasText = getInvokerText().trim().length() > 0;            canChange = (invoker.isEditable() || pasteOnUneditable()) && invoker.isEnabled() && invoker.isVisible();        }        getCutTextMenu().setEnabled(hasSelectableText && canChange);        getCopyTextMenu().setEnabled(hasSelectableText);        getSelectAllTextMenu().setEnabled(hasText);        String clipboardText = null;        try {            Clipboard clipboard = getClipboard();            if (clipboard != null)                clipboardText = (String)clipboard.getContents(this).getTransferData(DataFlavor.stringFlavor);        } catch (Exception ex) {        }        boolean textInClipboard = hasTextContent();        getPasteTextMenu().setEnabled(                clipboardText != null && clipboardText.length() > 0 && textInClipboard && canChange && pasteEnable());    }    public JMenuItem getCutTextMenu() {        if (cutTextMenu == null) {            cutTextMenu = new JMenuItem();            cutTextMenu.setText("Cut");            cutTextMenu.setEnabled(false);            cutTextMenu.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    if (invoker == null)                        return;                    String s = getSelectedText(false);                    if (s == null)                        return;                    if (!preCut())                        return;                    invoker.replaceSelection("");                    sendToClipboard(CutCopyPasteMenuItems.this, s);                    postCut();                }            });        }        return cutTextMenu;    }    public JMenuItem getCopyTextMenu() {        if (copyTextMenu == null) {            copyTextMenu = new JMenuItem();            copyTextMenu.setText("Copy");            copyTextMenu.setEnabled(false);            copyTextMenu.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    if (invoker == null)                        return;                    String s = getSelectedText(false);                    if (s == null)                        return;                    if (!preCopy())                        return;                    StringSelection fieldContent = new StringSelection(s);                    Clipboard clipboard = getClipboard();                    if (clipboard != null)                        clipboard.setContents(fieldContent, CutCopyPasteMenuItems.this);                    postCopy();                }            });        }        return copyTextMenu;    }    public JMenuItem getPasteTextMenu() {        if (pasteTextMenu == null) {            pasteTextMenu = new JMenuItem();            pasteTextMenu.setText("Paste");            pasteTextMenu.setEnabled(false);            pasteTextMenu.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    if (!hasTextContent() || invoker == null)                        return;                    String s = null;                    s = getClipboardText();                    if (s == null || s.length() == 0)                        return;                    if (!prePaste())                        return;                    if (pasteOver)                        invoker.setText(s);                    else                        invoker.replaceSelection(s);                    postPaste();                }            });        }        return pasteTextMenu;    }    public JMenuItem getSelectAllTextMenu() {        if (selectAllTextMenu == null) {            selectAllTextMenu = new JMenuItem();            selectAllTextMenu.setText("Select all");            selectAllTextMenu.setEnabled(false);            selectAllTextMenu.addActionListener(new ActionListener() {                public void actionPerformed(ActionEvent e) {                    if (!hasTextContent() || invoker == null)                        return;                    if (!preSelectAll())                        return;                    invoker.setSelectionStart(0);                    invoker.setSelectionEnd(getInvokerText().length());                    invoker.requestFocusInWindow();                    postSelectAll();                }            });        }        return selectAllTextMenu;    }    public boolean hasTextContent() {        Clipboard clipboard = getClipboard();        if (clipboard == null)            return false;        try {            Transferable contents = clipboard.getContents(null);            return contents != null && contents.isDataFlavorSupported(DataFlavor.stringFlavor);        } catch (Exception e) {            return false;        }    }    /**     * The selected text on the visual component on which CutCopyPasteMenu will operate.     */    public String getSelectedText(boolean allIfNoneSelected) {        if (invoker == null)            return null;        try {            String s = invoker.getSelectedText();            if (s == null && allIfNoneSelected)                return getInvokerText();            return s;        } catch (Exception e) {            return null;        }    }    public String getClipboardText() {        String result = "";        Clipboard clipboard = getClipboard();        if (clipboard == null)            return null;        Transferable contents = clipboard.getContents(null);        if (!hasTextContent())            return null;        try {            result = (String)contents.getTransferData(DataFlavor.stringFlavor);        } catch (Exception ex) {            return null;        }        return result;    }    private static Clipboard getClipboard() {        try {            return Toolkit.getDefaultToolkit().getSystemClipboard();        } catch (Exception e) {            return null;        }    }}